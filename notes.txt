In C++, **containers** are data structures that store collections of elements. These containers are part of the Standard Template Library (STL) and come with various operations to efficiently manage and manipulate data. Containers are classified into three major categories:

1. **Sequence Containers**
   These containers store elements in a linear fashion, allowing access in a sequential manner. The main types are:

   - **`std::vector`**:
     Dynamic array that grows in size as needed. Provides fast access via indices and good performance for push_back operations (adding elements at the end).

   - **`std::deque`**:
     Double-ended queue that allows fast insertion and deletion at both ends. Slightly slower than `std::vector` in accessing elements but more flexible with insertion.

   - **`std::list`**:
     Doubly-linked list, where each element points to the next and previous ones. Insertion and deletion anywhere in the list is fast, but access by index is slow because it requires traversing the list.

   - **`std::forward_list`**:
     Singly-linked list, where each element points only to the next one. More memory-efficient than `std::list` but can only be traversed in one direction.

   - **`std::array`**:
     Fixed-size array (introduced in C++11), which wraps traditional C-style arrays into a container with standard functionality and methods. The size cannot be changed after initialization.

2. **Associative Containers**
   These containers maintain elements in a sorted or hashed manner and provide fast lookup, insertion, and deletion based on keys.

   - **`std::set`**:
     Stores unique elements in a sorted order. Fast search and retrieval with logarithmic time complexity. No duplicates are allowed.

   - **`std::multiset`**:
     Similar to `std::set`, but allows duplicate elements.

   - **`std::map`**:
     Stores key-value pairs, with unique keys in sorted order. Provides fast lookups by key with logarithmic complexity.

   - **`std::multimap`**:
     Similar to `std::map`, but allows multiple pairs with the same key.

   - **`std::unordered_set`** (C++11):
     Stores unique elements, but the order is not sorted. Instead, it uses a hash table to provide average constant-time complexity for lookup, insertion, and deletion.

   - **`std::unordered_map`** (C++11):
     Stores key-value pairs using a hash table, with average constant-time operations for lookup and insertion. Keys are unique, and order is not guaranteed.

   - **`std::unordered_multiset`** and **`std::unordered_multimap`** (C++11):
     Variants of `unordered_set` and `unordered_map` that allow duplicates.

3. **Container Adapters**
   These are special containers built on top of other containers, providing specific behaviors:

   - **`std::stack`**:
     Follows the Last In, First Out (LIFO) principle. Usually implemented using `std::deque` or `std::vector`. Provides push, pop, and top operations.

   - **`std::queue`**:
     Follows the First In, First Out (FIFO) principle. Usually implemented using `std::deque` or `std::list`. Provides push, pop, and front/back access.

   - **`std::priority_queue`**:
     A specialized queue where the element with the highest priority is always at the front. Usually implemented using `std::vector` and `std::make_heap` for sorting.

### Summary of Key Characteristics

| Container           | Fast Access | Fast Insert/Delete | Ordered | Duplicates |
|---------------------|-------------|--------------------|---------|------------|
| `std::vector`        | Yes         | End only           | No      | Yes        |
| `std::deque`         | Yes         | Both ends          | No      | Yes        |
| `std::list`          | No          | Anywhere           | No      | Yes        |
| `std::forward_list`  | No          | Anywhere (single direction) | No | Yes |
| `std::set`           | No          | Yes                | Yes     | No         |
| `std::multiset`      | No          | Yes                | Yes     | Yes        |
| `std::map`           | No          | Yes                | Yes     | No         |
| `std::multimap`      | No          | Yes                | Yes     | Yes        |
| `std::unordered_set` | No          | Yes                | No      | No         |
| `std::unordered_map` | No          | Yes                | No      | No         |
| `std::stack`         | No          | Top/End            | No      | Yes        |
| `std::queue`         | No          | Front/Back         | No      | Yes        |
| `std::priority_queue`| No          | Front (priority)   | No      | Yes        |

Each container has its use case based on performance needs like access time, insertion speed, and the need for order or unique elements.
